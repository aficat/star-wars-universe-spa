{"version":3,"sources":["components/Header.js","actions/personActions.js","actions/types.js","components/PeopleCardsSingleCardModal.js","components/PeopleCardsSingleCard.js","actions/peopleActions.js","components/PeopleCards.js","components/PeopleCardsPagination.js","components/Footer.js","reducers/peopleReducer.js","reducers/personReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","Typography","variant","color","Component","fetchHomeworld","url","dispatch","fetch","then","res","json","data","type","payload","homeworld","name","catch","error","console","fetchSpecies","urls","speciesNames","map","push","species","fetchVehicles","vehiclesNames","vehicles","fetchStarships","starshipsNames","starships","fetchFilms","filmsTitles","title","films","resetStore","PeopleCardsSingleCardModal","this","props","height","mass","gender","eyeColor","skinColor","hairColor","birthYear","createdDate","editedDate","open","handleClose","created","Date","edited","Modal","size","onClose","closeIcon","Content","scrolling","component","toString","toDateString","connect","state","person","cardStyles","textAlign","PeopleCardsSingleCard","handleClick","homeworldURL","filmsURLs","speciesURLs","vehiclesURLs","starshipsURLs","setState","bind","Grid","item","xs","md","Card","style","CardContent","CardActions","Button","onClick","fetchPeople","activePage","refreshPageStatus","people","results","count","status","PeopleCards","renderResult","eye_color","hair_color","skin_color","birth_year","key","renderAwaitingCircularProgress","margin","CircularProgress","PeopleCardsPagination","handlePaginationChange","e","totalPages","Math","ceil","Pagination","defaultActivePage","onPageChange","Footer","getYear","initialState","combineReducers","action","middleware","thunk","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","containerStyles","marginTop","App","Container","align","container","spacing","justify","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4ce03383.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Typography } from '@material-ui/core';\r\n\r\n// Renders Header of Application Title and Description\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    color=\"textPrimary\"\r\n                >\r\n                    Star Wars Universe\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"subtitle1\"\r\n                    color=\"textPrimary\"\r\n                >\r\n                    This is a database of all the people in the Star Wars Universe.\r\n                </Typography>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import { FETCH_HOMEWORLD, FETCH_SPECIES, FETCH_VEHICLES, FETCH_STARSHIPS, FETCH_FILMS} from './types';\r\n\r\n/**\r\n * @param {string} url - /homeworld/:homeworldId url api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchHomeworld = (url) => (dispatch) => {\r\n    fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            return dispatch({\r\n                type: FETCH_HOMEWORLD,\r\n                payload: {\r\n                    homeworld: data.name\r\n                }\r\n            });\r\n        })\r\n        .catch(error => console.error(error));\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /species/:speciesId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchSpecies = (urls) => (dispatch) => {\r\n    let speciesNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                speciesNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_SPECIES,\r\n            payload: {\r\n                species: speciesNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /vehicles/:vehicleId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchVehicles = (urls) => (dispatch) => {\r\n    let vehiclesNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                vehiclesNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_VEHICLES,\r\n            payload: {\r\n                vehicles: vehiclesNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /starships/:starshipId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchStarships = (urls) => (dispatch) => {\r\n    let starshipsNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                starshipsNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_STARSHIPS,\r\n            payload: {\r\n                starships: starshipsNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /film/:filmId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchFilms = (urls) => (dispatch) => {\r\n    let filmsTitles = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                filmsTitles.push(data.title);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_FILMS,\r\n            payload: {\r\n                films: filmsTitles\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport const resetStore = () => () => {return;}","// PEOPLE ACTIONS\r\nexport const FETCH_PEOPLE = 'FETCH_PEOPLE';\r\n\r\n// PERSON ACTIONS\r\nexport const FETCH_HOMEWORLD = 'FETCH_HOMEWORLD';\r\nexport const FETCH_SPECIES = 'FETCH_SPECIES';\r\nexport const FETCH_VEHICLES = 'FETCH_VEHICLES';\r\nexport const FETCH_STARSHIPS = 'FETCH_STARSHIPS';\r\nexport const FETCH_FILMS = 'FETCH_FILMS';\r\nexport const RESET = 'RESET'; // reset person redux store","import React, { Component } from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { fetchHomeworld, fetchSpecies, fetchFilms, fetchStarships, fetchVehicles, resetStore } from '../actions/personActions';\r\n\r\nclass PeopleCardsSingleCardModal extends Component {\r\n    render() {\r\n        const {\r\n            name,\r\n            height,\r\n            mass,\r\n            gender,\r\n            eyeColor,\r\n            skinColor,\r\n            hairColor,\r\n            birthYear,\r\n            createdDate,\r\n            editedDate,\r\n            homeworld,\r\n            species,\r\n            vehicles,\r\n            starships,\r\n            films,\r\n            open,\r\n            handleClose\r\n        } = this.props;\r\n        const created = new Date(createdDate);\r\n        const edited = new Date(editedDate);\r\n        return (\r\n            <Modal\r\n                size={\"mini\"}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeIcon\r\n            >\r\n                <Modal.Header>\r\n                    {name}\r\n                </Modal.Header>\r\n                <Modal.Content scrolling>\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        component=\"p\"\r\n                    >\r\n                        Gender: {gender}<br />\r\n                        Birth Year: {birthYear}<br />\r\n                        <br />\r\n                        Height: {height}<br />\r\n                        Mass: {mass}<br />\r\n                        Eye Color: {eyeColor} <br />\r\n                        Skin Color: {skinColor} <br />\r\n                        Hair Color: {hairColor} <br />\r\n                        <br />\r\n                        Homeworld: {homeworld} <br />\r\n                        Species: {species.toString() ? species.toString() : \"-\"} <br />\r\n                        <br />\r\n                        Vehicles:  {vehicles.toString() ? vehicles.toString() : \"-\"} <br />\r\n                            Starships:  {starships.toString() ? starships.toString() : \"-\"} <br />\r\n                        <br />\r\n                            Films:  {films.toString() ? films.toString() : \"-\"} <br />\r\n                        <br />\r\n                        Created on {created.toDateString()}<br />\r\n                        Last edited on {edited.toDateString()}\r\n                    </Typography>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    homeworld: state.person.homeworld,\r\n    species: state.person.species,\r\n    films: state.person.films,\r\n    starships: state.person.starships,\r\n    vehicles: state.person.vehicles\r\n});\r\nexport default connect(mapStateToProps, {\r\n    fetchHomeworld,\r\n    fetchSpecies,\r\n    fetchFilms,\r\n    fetchStarships,\r\n    fetchVehicles,\r\n    resetStore\r\n})(PeopleCardsSingleCardModal);\r\n","import React, { Component } from 'react';\r\nimport { Card, CardContent, Typography, Grid, Button, CardActions } from '@material-ui/core';\r\nimport { fetchHomeworld, fetchSpecies, fetchFilms, fetchStarships, fetchVehicles, resetStore } from '../actions/personActions';\r\nimport { connect } from 'react-redux';\r\nimport PeopleCardsSingleCardModal from './PeopleCardsSingleCardModal';\r\n\r\nconst cardStyles = {\r\n    textAlign: \"left\"\r\n};\r\n\r\nclass PeopleCardsSingleCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        }\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Trigger to update person details and open modal box.\r\n     * \r\n     * @const  {string} homeworldURL - homeworld URL\r\n     * @const  {string[]} filmsURLs - List of film URLs\r\n     * @const  {string[]} speciesURLs - List of species URLs\r\n     * @const  {string[]} vehiclesURLs - List of vehicles URLs\r\n     * @const  {string[]} starshipsURLs - List of starships URLs\r\n     */\r\n    handleClick = (homeworldURL, filmsURLs, speciesURLs, vehiclesURLs, starshipsURLs) => {\r\n        this.props.fetchHomeworld(homeworldURL);\r\n        this.props.fetchSpecies(speciesURLs);\r\n        this.props.fetchStarships(starshipsURLs);\r\n        this.props.fetchFilms(filmsURLs);\r\n        this.props.fetchVehicles(vehiclesURLs);\r\n        this.setState({ open: true })\r\n    };\r\n\r\n    // Trigger to close modal box\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n        this.props.resetStore();\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            name,\r\n            gender,\r\n            birthYear,\r\n            height,\r\n            mass,\r\n            eyeColor,\r\n            hairColor,\r\n            skinColor,\r\n            createdDate,\r\n            editedDate,\r\n            films,\r\n            starships,\r\n            homeworld,\r\n            vehicles,\r\n            species,\r\n            homeworldURL,\r\n            filmsURLs,\r\n            speciesURLs,\r\n            vehiclesURLs,\r\n            starshipsURLs,\r\n        } = this.props;\r\n        return (\r\n            <Grid item xs={12} md={3}>\r\n                <Card style={cardStyles}>\r\n                    <CardContent>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                            component=\"h2\"\r\n                        >\r\n                            {name}\r\n                        </Typography>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            component=\"p\"\r\n                        >\r\n                            Gender: {gender}<br />\r\n                        Birth Year: {birthYear}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button\r\n                            onClick={() => this.handleClick(homeworldURL, filmsURLs, speciesURLs, vehiclesURLs, starshipsURLs)}\r\n                        >\r\n                            View More Details\r\n                            </Button>\r\n                    </CardActions>\r\n                </Card>\r\n                <PeopleCardsSingleCardModal\r\n                    name={name}\r\n                    gender={gender}\r\n                    height={height}\r\n                    mass={mass}\r\n                    eyeColor={eyeColor}\r\n                    hairColor={hairColor}\r\n                    skinColor={skinColor}\r\n                    birthYear={birthYear}\r\n                    createdDate={createdDate}\r\n                    editedDate={editedDate}\r\n                    open={this.state.open}\r\n                    homeworld={homeworld}\r\n                    species={species}\r\n                    films={films}\r\n                    starships={starships}\r\n                    vehicles={vehicles}\r\n                    handleClose={this.handleClose}\r\n                />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    homeworld: state.person.homeworld,\r\n    species: state.person.species,\r\n    films: state.person.films,\r\n    starships: state.person.starships,\r\n    vehicles: state.person.vehicles\r\n});\r\nexport default connect(mapStateToProps,\r\n    {\r\n        fetchHomeworld,\r\n        fetchSpecies,\r\n        fetchFilms,\r\n        fetchStarships,\r\n        fetchVehicles,\r\n        resetStore\r\n    })(PeopleCardsSingleCard);\r\n","import { FETCH_PEOPLE } from './types';\r\n\r\n/**\r\n * @param {number} activePage - current page number\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchPeople = (activePage, refreshPageStatus = false) => (dispatch) => {\r\n    fetch(`https://swapi.co/api/people/?page=${activePage}`).then(res => res.json())\r\n        .then(data => {\r\n            return dispatch({\r\n                type: FETCH_PEOPLE,\r\n                payload: {\r\n                    people: data.results,\r\n                    count: data.count,\r\n                    status: data.count === 0 ? \"\" : \"done\",\r\n                    activePage: activePage,\r\n                    refreshPageStatus: refreshPageStatus\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            return dispatch({\r\n                type: FETCH_PEOPLE,\r\n                payload: {\r\n                    status: \"error\",\r\n                }\r\n            });\r\n        });\r\n}","import React, { Component } from 'react';\r\nimport PeopleCardsSingleCard from './PeopleCardsSingleCard';\r\nimport { fetchPeople } from '../actions/peopleActions';\r\nimport { connect } from 'react-redux';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\n\r\n// Renders Main Body of Star Wars People's Cards\r\nclass PeopleCards extends Component {\r\n\r\n    // Fetch list of Star Wars People based on active page\r\n    componentDidMount() {\r\n        this.props.fetchPeople(1);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { refreshPageStatus, activePage } = this.props;\r\n        if (refreshPageStatus) {\r\n            // Updates activePage and set refreshPageStatus back to false in store after re-render\r\n            this.props.fetchPeople(activePage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @const  {Object} peopleCards - List of People Objects\r\n     * \r\n     * @returns {} returns all PeopleCardsSingleCard component for each person\r\n     */\r\n    renderResult = () => {\r\n        const { people } = this.props;\r\n        return (\r\n            <>\r\n                {people && people.map(person =>\r\n                    <PeopleCardsSingleCard\r\n                        name={person.name}\r\n                        gender={person.gender}\r\n                        height={person.height}\r\n                        mass={person.mass}\r\n                        url={person.url}\r\n                        eyeColor={person.eye_color}\r\n                        hairColor={person.hair_color}\r\n                        skinColor={person.skin_color}\r\n                        birthYear={person.birth_year}\r\n                        homeworldURL={person.homeworld}\r\n                        filmsURLs={person.films}\r\n                        speciesURLs={person.species}\r\n                        vehiclesURLs={person.vehicles}\r\n                        starshipsURLs={person.starships}\r\n                        createdDate={person.created}\r\n                        editedDate={person.edited}\r\n                        key={person.url}\r\n                    />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderAwaitingCircularProgress = () => { return <div style={{ margin: 50 }}> <CircularProgress /> </div> }\r\n\r\n    render() {\r\n        const { status, refreshPageStatus } = this.props;\r\n        switch (status) {\r\n            case \"done\": // successfully retrieved people data\r\n                return (\r\n                    refreshPageStatus ?\r\n                        this.renderAwaitingCircularProgress()\r\n                        : this.renderResult()\r\n                );\r\n            case \"retrieving\": // retrieving people data\r\n                return this.renderAwaitingCircularProgress();\r\n            case \"error\": // error retrieving people data\r\n                return (\r\n                    <div>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            component=\"p\"\r\n                            color=\"error\"\r\n                        >\r\n                            Error had occured when retrieving people data.\r\n                        </Typography>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <div>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            component=\"p\">\r\n                            There is no data.\r\n                        </Typography>\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people: state.people.people,\r\n    status: state.people.status,\r\n    refreshPageStatus: state.people.refreshPageStatus,\r\n    activePage: state.people.activePage\r\n});\r\nexport default connect(mapStateToProps, { fetchPeople })(PeopleCards);\r\n","import React, { Component } from 'react';\r\nimport { Pagination } from 'semantic-ui-react';\r\nimport { fetchPeople } from '../actions/peopleActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PeopleCardsPagination extends Component {\r\n\r\n    /**\r\n     * Update active page when pagination settings are changed\r\n     * \r\n     * @const  {number} activePage - current page number\r\n     */\r\n    handlePaginationChange = (e, { activePage }) => {\r\n        // Updates activePage and set refreshPageStatus to true in store and re-render PeopleCards display based on active page\r\n        this.props.fetchPeople(activePage, true);\r\n    }\r\n\r\n    /**\r\n     * @const  {number} count - Total number of Star Wars people\r\n     * \r\n     * @returns {} returns Pagination component that manages people's cards page views\r\n     */\r\n    render() {\r\n        const { count, activePage } = this.props;\r\n        let totalPages = Math.ceil(count / 10); // 10 cards per page\r\n        return (\r\n            <Pagination\r\n                defaultActivePage={activePage}\r\n                onPageChange={this.handlePaginationChange}\r\n                totalPages={totalPages}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    count: state.people.count,\r\n    activePage: state.people.activePage\r\n});\r\nexport default connect(mapStateToProps, { fetchPeople })(PeopleCardsPagination);\r\n","import React, { Component } from 'react'\r\n\r\n// Renders Footer of Copyright text\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    Copyright Star Wars Universe\r\n                </p>\r\n                &copy;\r\n                {1900 + new Date().getYear()} Afiqah Rashid\r\n            </div>\r\n        )\r\n    }\r\n}","import { FETCH_PEOPLE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    people: [],\r\n    count: 0,\r\n    status: \"retrieving\",\r\n    activePage: 1,\r\n    refreshPageStatus: false\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_PEOPLE:\r\n            return {\r\n                ...state,\r\n                people: action.payload.people,\r\n                count: action.payload.count,\r\n                status: action.payload.status,\r\n                activePage: action.payload.activePage,\r\n                refreshPageStatus: action.payload.refreshPageStatus\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import { FETCH_HOMEWORLD, FETCH_SPECIES, FETCH_VEHICLES, FETCH_STARSHIPS, FETCH_FILMS, RESET } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    homeworld: \"Retrieving...\",\r\n    species: [\"Retrieving...\", \"\"],\r\n    films: [\"Retrieving...\", \"\"],\r\n    starships: [\"Retrieving...\", \"\"],\r\n    vehicles: [\"Retrieving...\", \"\"]\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_HOMEWORLD:\r\n            return { ...state, homeworld: action.payload.homeworld };\r\n        case FETCH_SPECIES:\r\n            return { ...state, species: action.payload.species };\r\n        case FETCH_FILMS:\r\n            return { ...state, films: action.payload.films };\r\n        case FETCH_STARSHIPS:\r\n            return { ...state, starships: action.payload.starships };\r\n        case FETCH_VEHICLES:\r\n            return { ...state, vehicles: action.payload.vehicles };\r\n        case RESET:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\nimport peopleReducer from './peopleReducer';\r\nimport personReducer from './personReducer';\r\n\r\nexport default combineReducers({\r\n    people: peopleReducer,\r\n    person: personReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, initialState, composeEnhancer(applyMiddleware(...middleware)));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport { Container } from '@material-ui/core';\nimport Header from './components/Header';\nimport PeopleCards from './components/PeopleCards';\nimport PeopleCardsPagination from './components/PeopleCardsPagination';\nimport { Grid } from '@material-ui/core';\nimport Footer from './components/Footer';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst containerStyles = {\n  margin: \"auto\",\n  marginTop: \"50px\"\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container style={containerStyles} align=\"center\">\n          <Grid container spacing={3} justify=\"center\">\n            <Grid item xs={12}>\n              <Header />\n              <br />\n              <hr />\n            </Grid>\n            <PeopleCards />\n            <Grid item xs={12}>\n              <br />\n              <PeopleCardsPagination count={87} />\n            </Grid>\n            <Grid item xs={12}>\n              <br />\n              <Footer />\n            </Grid>\n          </Grid>\n        </Container>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}