{"version":3,"sources":["components/Header.js","components/PeopleCardsSingleCard.js","actions/personActions.js","actions/types.js","actions/peopleActions.js","components/PeopleCards.js","components/PeopleCardsPagination.js","components/Footer.js","reducers/peopleReducer.js","reducers/personReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","Typography","variant","color","Component","cardStyles","textAlign","PeopleCardsSingleCard","props","handleClick","homeworldURL","filmsURLs","speciesURLs","vehiclesURLs","starshipsURLs","fetchHomeworld","fetchSpecies","fetchStarships","fetchFilms","fetchVehicles","setState","open","handleClose","renderPersonCardModal","person","name","height","mass","gender","eyeColor","skinColor","hairColor","birthYear","createdDate","editedDate","homeworld","species","vehicles","starships","films","created","Date","edited","Modal","size","state","onClose","closeIcon","Content","scrolling","component","length","join","toDateString","this","Grid","item","xs","md","Card","style","CardContent","CardActions","Button","onClick","connect","url","dispatch","fetch","then","res","json","data","type","payload","catch","error","console","urls","speciesNames","map","push","filmsTitles","title","starshipsNames","vehiclesNames","fetchPeople","activePage","people","results","count","status","message","PeopleCards","renderResult","peopleCards","eye_color","hair_color","skin_color","birth_year","key","margin","CircularProgress","PeopleCardsPagination","handlePaginationChange","e","totalPages","Math","ceil","Pagination","defaultActivePage","onPageChange","Footer","getYear","initialState","combineReducers","action","middleware","thunk","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","containerStyles","marginTop","App","Container","align","container","spacing","justify","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7dbe3c2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Typography } from '@material-ui/core';\r\n\r\n// Renders Header of Application Title and Description\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    color=\"textPrimary\"\r\n                >\r\n                    Star Wars Universe\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"subtitle1\"\r\n                    color=\"textPrimary\"\r\n                >\r\n                    This is a database of all the people in the Star Wars Universe.\r\n                </Typography>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Card, CardContent, Typography, Grid, Button, CardActions } from '@material-ui/core';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { fetchHomeworld, fetchSpecies, fetchFilms, fetchStarships, fetchVehicles } from '../actions/personActions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst cardStyles = {\r\n    textAlign: \"left\"\r\n};\r\n\r\nclass PeopleCardsSingleCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger to update person details and open modal box.\r\n     * \r\n     * @const  {string} homeworldURL - homeworld URL\r\n     * @const  {string[]} filmsURLs - List of film URLs\r\n     * @const  {string[]} speciesURLs - List of species URLs\r\n     * @const  {string[]} vehiclesURLs - List of vehicles URLs\r\n     * @const  {string[]} starshipsURLs - List of starships URLs\r\n     */\r\n    handleClick = () => {\r\n        const {\r\n            homeworldURL,\r\n            filmsURLs,\r\n            speciesURLs,\r\n            vehiclesURLs,\r\n            starshipsURLs\r\n        } = this.props;\r\n        this.props.fetchHomeworld(homeworldURL);\r\n        this.props.fetchSpecies(speciesURLs);\r\n        this.props.fetchStarships(starshipsURLs);\r\n        this.props.fetchFilms(filmsURLs);\r\n        this.props.fetchVehicles(vehiclesURLs);\r\n        this.setState({ open: true })\r\n    };\r\n\r\n    // Trigger to close modal box\r\n    handleClose = () => {\r\n        this.setState({ open: false })\r\n    };\r\n\r\n    // Renders modal box with person's details\r\n    renderPersonCardModal = (person) => {\r\n        const {\r\n            name,\r\n            height,\r\n            mass,\r\n            gender,\r\n            eyeColor,\r\n            skinColor,\r\n            hairColor,\r\n            birthYear,\r\n            createdDate,\r\n            editedDate\r\n        } = person;\r\n        const {\r\n            homeworld,\r\n            species,\r\n            vehicles,\r\n            starships,\r\n            films\r\n        } = this.props;\r\n        const created = new Date(createdDate);\r\n        const edited = new Date(editedDate);\r\n        return (\r\n            <Modal\r\n                size={\"mini\"}\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                closeIcon\r\n            >\r\n                <Modal.Header>\r\n                    {name}\r\n                </Modal.Header>\r\n                <Modal.Content scrolling>\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        component=\"p\"\r\n                    >\r\n                        Gender: {gender}<br />\r\n                        Birth Year: {birthYear}<br />\r\n                        <br />\r\n                        Height: {height}<br />\r\n                        Mass: {mass}<br />\r\n                        Eye Color: {eyeColor} <br />\r\n                        Skin Color: {skinColor} <br />\r\n                        Hair Color: {hairColor} <br />\r\n                        <br />\r\n                        Homeworld: {homeworld} <br />\r\n                        Species: {species.length === 0 ?\r\n                            \"Unknown\"\r\n                            : (species.join(\", \"))} <br />\r\n                        <br />\r\n                        Vehicles:  {vehicles.length === 0 ?\r\n                            \"None\"\r\n                            : (vehicles.join(\", \"))} <br />\r\n                            Starships:  {starships.length === 0 ?\r\n                            \"None\"\r\n                            : (starships.join(\", \"))} <br />\r\n                        <br />\r\n                            Films:  {films.length === 0 ?\r\n                            \"None\"\r\n                            : (films.join(\", \"))} <br />\r\n                        <br />\r\n                        Created on {created.toDateString()}<br />\r\n                        Last edited on {edited.toDateString()}\r\n                    </Typography>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            name,\r\n            gender,\r\n            birthYear\r\n        } = this.props;\r\n        return (\r\n            <Grid item xs={12} md={3}>\r\n                <Card style={cardStyles}>\r\n                    <CardContent>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                            component=\"h2\"\r\n                        >\r\n                            {name}\r\n                        </Typography>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            component=\"p\"\r\n                        >\r\n                            Gender: {gender}<br />\r\n                        Birth Year: {birthYear}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button\r\n                            onClick={() => this.handleClick()}\r\n                        >\r\n                            View More Details\r\n                            </Button>\r\n                    </CardActions>\r\n                </Card>\r\n                {this.renderPersonCardModal(this.props)}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    homeworld: state.person.homeworld,\r\n    species: state.person.species,\r\n    films: state.person.films,\r\n    starships: state.person.starships,\r\n    vehicles: state.person.vehicles\r\n});\r\nexport default connect(mapStateToProps,\r\n    {\r\n        fetchHomeworld,\r\n        fetchSpecies,\r\n        fetchFilms,\r\n        fetchStarships,\r\n        fetchVehicles\r\n    })(PeopleCardsSingleCard);\r\n","import { FETCH_HOMEWORLD, FETCH_SPECIES, FETCH_VEHICLES, FETCH_STARSHIPS, FETCH_FILMS} from './types';\r\n\r\n/**\r\n * @param {string} url - /homeworld/:homeworldId url api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchHomeworld = (url) => (dispatch) => {\r\n    fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            return dispatch({\r\n                type: FETCH_HOMEWORLD,\r\n                payload: {\r\n                    homeworld: data.name\r\n                }\r\n            });\r\n        })\r\n        .catch(error => console.error(error));\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /species/:speciesId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchSpecies = (urls) => (dispatch) => {\r\n    let speciesNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                speciesNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_SPECIES,\r\n            payload: {\r\n                species: speciesNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /vehicles/:vehicleId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchVehicles = (urls) => (dispatch) => {\r\n    let vehiclesNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                vehiclesNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_VEHICLES,\r\n            payload: {\r\n                vehicles: vehiclesNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /starships/:starshipId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchStarships = (urls) => (dispatch) => {\r\n    let starshipsNames = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                starshipsNames.push(data.name);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_STARSHIPS,\r\n            payload: {\r\n                starships: starshipsNames\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string[]} urls - a list of /film/:filmId urls api call\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchFilms = (urls) => (dispatch) => {\r\n    let filmsTitles = [];\r\n    urls && urls.map(url => {\r\n        fetch(url).then(res => res.json())\r\n            .then(data => {\r\n                filmsTitles.push(data.title);\r\n            })\r\n            .catch(error => console.error(error));\r\n        return dispatch({\r\n            type: FETCH_FILMS,\r\n            payload: {\r\n                films: filmsTitles\r\n            }\r\n        })\r\n    })\r\n}","// PEOPLE ACTIONS\r\nexport const FETCH_PEOPLE = 'FETCH_PEOPLE';\r\n\r\n// PERSON ACTIONS\r\nexport const FETCH_HOMEWORLD = 'FETCH_HOMEWORLD';\r\nexport const FETCH_SPECIES = 'FETCH_SPECIES';\r\nexport const FETCH_VEHICLES = 'FETCH_VEHICLES';\r\nexport const FETCH_STARSHIPS = 'FETCH_STARSHIPS';\r\nexport const FETCH_FILMS = 'FETCH_FILMS';","import { FETCH_PEOPLE } from './types';\r\n\r\n/**\r\n * @param {number} activePage - current page number\r\n * \r\n * @return {} returns dispatch - action type and payload data \r\n */\r\nexport const fetchPeople = (activePage) => (dispatch) => {\r\n    fetch(`https://swapi.co/api/people/?page=${activePage}`).then(res => res.json())\r\n        .then(data => {\r\n            return dispatch({\r\n                type: FETCH_PEOPLE,\r\n                payload: {\r\n                    people: data.results,\r\n                    count: data.count,\r\n                    status: data.count === 0 ? \"\" : \"done\",\r\n                    message: data.count === 0 ? \"There is no data.\" : \"Successfully retrieved people data.\"\r\n                }\r\n            });\r\n        })\r\n        .catch(error => {\r\n            return dispatch({\r\n                type: FETCH_PEOPLE,\r\n                payload: {\r\n                    status: \"error\",\r\n                    message: \"Error had occured when retrieving people data.\"\r\n                }\r\n            });\r\n        });\r\n}","import React, { Component } from 'react';\r\nimport PeopleCardsSingleCard from './PeopleCardsSingleCard';\r\nimport { fetchPeople } from '../actions/peopleActions';\r\nimport { connect } from 'react-redux';\r\nimport {CircularProgress, Typography} from '@material-ui/core';\r\n\r\n// Renders Main Body of Star Wars People's Cards\r\nclass PeopleCards extends Component {\r\n\r\n    // Fetch list of Star Wars People\r\n    componentDidMount() {\r\n        // activePage = 1; renders first page of people's results\r\n        this.props.fetchPeople(1);\r\n    }\r\n\r\n    /**\r\n     * @const  {Object} peopleCards - List of People Objects\r\n     * \r\n     * @returns {} returns all PeopleCardsSingleCard component for each person\r\n     */\r\n    renderResult = () => {\r\n        const peopleCards = this.props.people;\r\n        return (\r\n            <>\r\n                {peopleCards && peopleCards.map(person =>\r\n                    <PeopleCardsSingleCard\r\n                        name={person.name}\r\n                        gender={person.gender}\r\n                        height={person.height}\r\n                        mass={person.mass}\r\n                        url={person.url}\r\n                        eyeColor={person.eye_color}\r\n                        hairColor={person.hair_color}\r\n                        skinColor={person.skin_color}\r\n                        birthYear={person.birth_year}\r\n                        homeworldURL={person.homeworld}\r\n                        filmsURLs={person.films}\r\n                        speciesURLs={person.species}\r\n                        vehiclesURLs={person.vehicles}\r\n                        starshipsURLs={person.starships}\r\n                        createdDate={person.created}\r\n                        editedDate={person.edited}\r\n                        key={person.url}\r\n                    />\r\n                )}\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { status, message } = this.props;\r\n        switch (status) {\r\n            case \"done\": // successfully retrieved people data\r\n                return this.renderResult();\r\n            case \"retrieving\": // retrieving people data\r\n                return <div style={{margin: 50}}><CircularProgress/></div>;\r\n            case \"error\": // error retrieving people data\r\n                return (<div><Typography variant=\"body2\" component=\"p\" color=\"error\">{message}</Typography></div>);\r\n            default:\r\n                return (<div><Typography variant=\"body2\" component=\"p\">{message}</Typography></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people: state.people.people,\r\n    status: state.people.status,\r\n    message: state.people.message\r\n});\r\nexport default connect(mapStateToProps, { fetchPeople })(PeopleCards);\r\n","import React, { Component } from 'react';\r\nimport { Pagination } from 'semantic-ui-react';\r\nimport { fetchPeople } from '../actions/peopleActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PeopleCardsPagination extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePage: 1\r\n        }\r\n    }\r\n\r\n    // Fetch list of Star Wars People based on active page\r\n    componentDidMount() {\r\n        this.props.fetchPeople(this.state.activePage);\r\n    }\r\n\r\n\r\n    /**\r\n     * Update active page when pagination settings are changed\r\n     * \r\n     * @const  {number} activePage - current page number\r\n     */\r\n    handlePaginationChange = (e, { activePage }) => {\r\n        this.setState({ activePage: activePage });\r\n\r\n        // Updates store and re-render PeopleCards display based on active page\r\n        this.props.fetchPeople(activePage);\r\n    }\r\n\r\n    /**\r\n     * @const  {number} count - Total number of Star Wars people\r\n     * \r\n     * @returns {} returns Pagination component that manages people's cards page views\r\n     */\r\n    render() {\r\n        const { count } = this.props;\r\n        let totalPages = Math.ceil(count / 10); // 10 cards per page\r\n        return (\r\n            <Pagination\r\n                defaultActivePage={this.state.activePage}\r\n                onPageChange={this.handlePaginationChange}\r\n                totalPages={totalPages}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    count: state.people.count\r\n});\r\nexport default connect(mapStateToProps, { fetchPeople })(PeopleCardsPagination);\r\n","import React, { Component } from 'react'\r\n\r\n// Renders Footer of Copyright text\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    Copyright Star Wars Universe\r\n                </p>\r\n                &copy;\r\n                {1900 + new Date().getYear()} Afiqah Rashid\r\n            </div>\r\n        )\r\n    }\r\n}","import { FETCH_PEOPLE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    people: [],\r\n    count: 0,\r\n    status: \"retrieving\",\r\n    message: \"Retrieving people data...\"\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_PEOPLE:\r\n            return {\r\n                ...state,\r\n                people: action.payload.people,\r\n                count: action.payload.count,\r\n                status: action.payload.status,\r\n                message: action.payload.message\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import { FETCH_HOMEWORLD, FETCH_SPECIES, FETCH_VEHICLES, FETCH_STARSHIPS, FETCH_FILMS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    homeworld: \"\",\r\n    species: [],\r\n    films: [],\r\n    starships: [],\r\n    vehicles: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_HOMEWORLD:\r\n            return { ...state, homeworld: action.payload.homeworld };\r\n        case FETCH_SPECIES:\r\n            return { ...state, species: action.payload.species };\r\n        case FETCH_FILMS:\r\n            return { ...state, films: action.payload.films };\r\n        case FETCH_STARSHIPS:\r\n            return { ...state, starships: action.payload.starships };\r\n        case FETCH_VEHICLES:\r\n            return { ...state, vehicles: action.payload.vehicles };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\nimport peopleReducer from './peopleReducer';\r\nimport personReducer from './personReducer';\r\n\r\nexport default combineReducers({\r\n    people: peopleReducer,\r\n    person: personReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, initialState, composeEnhancer(applyMiddleware(...middleware)));\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport { Container } from '@material-ui/core';\nimport Header from './components/Header';\nimport PeopleCards from './components/PeopleCards';\nimport PeopleCardsPagination from './components/PeopleCardsPagination';\nimport { Grid } from '@material-ui/core';\nimport Footer from './components/Footer';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nconst containerStyles = {\n  margin: \"auto\",\n  marginTop: \"50px\"\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container style={containerStyles} align=\"center\">\n          <Grid container spacing={3} justify=\"center\">\n            <Grid item xs={12}>\n              <Header />\n              <br />\n              <hr />\n            </Grid>\n            <PeopleCards />\n            <Grid item xs={12}>\n              <br />\n              <PeopleCardsPagination count={87} />\n            </Grid>\n            <Grid item xs={12}>\n              <br />\n              <Footer />\n            </Grid>\n          </Grid>\n        </Container>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}